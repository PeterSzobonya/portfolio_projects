/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.Icon;
import Components.Constants;
import java.awt.Color;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import java.util.Timer; 
import java.util.TimerTask;
import java.nio.file.Paths;

/**
 * This class makes the players able to chose their color and bikes for the match.
 * @author peter
 */
public class PlayerSelection extends javax.swing.JPanel {

    
    private Constants gameConsts;
    private int playerOneColorId;
    private int playerTwoColorId;
    private int playerOneArrowId;
    private int playerTwoArrowId;
    private boolean playerOneIsReady;
    private boolean playerTwoIsReady;
    
    private Timer timer;
    
    private final TronWindow window;
    /**
     * Creates new form PlayerSelection
     */
    public PlayerSelection(TronWindow window) {
        initComponents();
        gameConsts = new Constants();
        playerOneColorId = 0;
        playerTwoColorId = 1;
        playerOneArrowId = 0;
        playerTwoArrowId = 0;
        playerOneIsReady = false;
        playerTwoIsReady = false;
        this.window = window;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playerOneTextfield = new javax.swing.JTextField();
        playerTwoTextfield = new javax.swing.JTextField();
        playerOnePrevColor = new javax.swing.JButton();
        playerOneNextColor = new javax.swing.JButton();
        playerTwoPrevColor = new javax.swing.JButton();
        playerTwoNextColor = new javax.swing.JButton();
        playerOneColor = new javax.swing.JTextField();
        playerTwoColor = new javax.swing.JTextField();
        playerOneReady = new javax.swing.JButton();
        playerTwoReady = new javax.swing.JButton();
        matchStarts = new javax.swing.JLabel();
        countDown = new javax.swing.JLabel();
        playerOnePrevArrow = new javax.swing.JButton();
        playerOneNextArrow = new javax.swing.JButton();
        playerTwoPrevArrow = new javax.swing.JButton();
        playerTwoNextArrow = new javax.swing.JButton();
        playerOneArrow = new javax.swing.JLabel();
        playerTwoArrow = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));

        playerOneTextfield.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        playerOneTextfield.setText("Player1");

        playerTwoTextfield.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        playerTwoTextfield.setText("Player2");

        playerOnePrevColor.setText("<");
        playerOnePrevColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerOnePrevColorActionPerformed(evt);
            }
        });

        playerOneNextColor.setText(">");
        playerOneNextColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerOneNextColorActionPerformed(evt);
            }
        });

        playerTwoPrevColor.setText("<");
        playerTwoPrevColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerTwoPrevColorActionPerformed(evt);
            }
        });

        playerTwoNextColor.setText(">");
        playerTwoNextColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerTwoNextColorActionPerformed(evt);
            }
        });

        playerOneColor.setEditable(false);
        playerOneColor.setBackground(new java.awt.Color(254, 65, 100));

        playerTwoColor.setEditable(false);
        playerTwoColor.setBackground(new java.awt.Color(255, 17, 255));

        playerOneReady.setBackground(new java.awt.Color(255, 0, 0));
        playerOneReady.setText("Ready");
        playerOneReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerOneReadyActionPerformed(evt);
            }
        });

        playerTwoReady.setBackground(new java.awt.Color(255, 0, 0));
        playerTwoReady.setText("Ready");
        playerTwoReady.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerTwoReadyActionPerformed(evt);
            }
        });

        matchStarts.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        matchStarts.setForeground(new java.awt.Color(51, 255, 51));

        countDown.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        countDown.setForeground(new java.awt.Color(51, 255, 51));

        playerOnePrevArrow.setText("<");
        playerOnePrevArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerOnePrevArrowActionPerformed(evt);
            }
        });

        playerOneNextArrow.setText(">");
        playerOneNextArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerOneNextArrowActionPerformed(evt);
            }
        });

        playerTwoPrevArrow.setText("<");
        playerTwoPrevArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerTwoPrevArrowActionPerformed(evt);
            }
        });

        playerTwoNextArrow.setText(">");
        playerTwoNextArrow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerTwoNextArrowActionPerformed(evt);
            }
        });

        playerOneArrow.setIcon(new javax.swing.ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/red:arrow1.png")
        );

        playerTwoArrow.setIcon(new javax.swing.ImageIcon(Paths.get("").toAbsolutePath().toString() + "/src/resources/pink:arrow1.png"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(playerOneTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                .addComponent(playerTwoTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(86, 86, 86))
            .addGroup(layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(playerOnePrevColor)
                    .addComponent(playerOnePrevArrow))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(playerOneColor, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(playerOneArrow)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerOneNextColor)
                            .addComponent(playerOneNextArrow)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(playerOneReady, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(playerTwoPrevColor)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(playerTwoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(32, 32, 32)
                                        .addComponent(playerTwoArrow)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(playerTwoNextArrow)
                                    .addComponent(playerTwoNextColor)))
                            .addComponent(playerTwoReady, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(playerTwoPrevArrow))
                .addGap(54, 54, 54))
            .addGroup(layout.createSequentialGroup()
                .addGap(324, 324, 324)
                .addComponent(matchStarts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(countDown)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerOneTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playerTwoTextfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(playerTwoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(playerTwoPrevColor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(playerTwoNextColor, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(playerOneNextColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(playerOneColor)
                    .addComponent(playerOnePrevColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playerOneNextArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerTwoPrevArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 172, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerOneArrow)
                            .addComponent(playerOnePrevArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerTwoNextArrow, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(playerTwoArrow))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 84, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(playerOneReady)
                            .addComponent(playerTwoReady))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(matchStarts, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(countDown))
                        .addGap(19, 19, 19))))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * The next color is chosen for the player one.
     * 
     * Colors are coming from the constants
     * @param evt 
     */
    private void playerOneNextColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerOneNextColorActionPerformed
        // TODO add your handling code here:
        if(gameConsts.getColors().size()>playerOneColorId+1){
            if(playerTwoColorId != gameConsts.getColors().size()-1 && playerOneColorId+1 == playerTwoColorId){
                playerOneColorId += 1;
            } else if(playerTwoColorId == gameConsts.getColors().size()-1 && playerOneColorId+1 == playerTwoColorId){
                playerOneColorId-=1;
            }
            playerOneColorId+=1;
            Color temp = gameConsts.getColors().get(playerOneColorId).getColor();
            playerOneColor.setBackground(temp);
            
            String colname = gameConsts.getColors().get(playerOneColorId).getName();
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colname).get(playerOneArrowId));
            playerOneArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerOneNextColorActionPerformed

    /**
     * The next color is chosen for the player two.
     * 
     * Colors are coming from the constants
     * @param evt 
     */
    private void playerTwoNextColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerTwoNextColorActionPerformed
        // TODO add your handling code here:
        if(gameConsts.getColors().size()>playerTwoColorId+1){
            if(playerOneColorId != gameConsts.getColors().size()-1 && playerTwoColorId+1 == playerOneColorId){
                playerTwoColorId += 1;
            } else if(playerOneColorId == gameConsts.getColors().size()-1 && playerTwoColorId+1 == playerOneColorId){
                playerTwoColorId-=1;
            }
            playerTwoColorId+=1;
            Color temp = gameConsts.getColors().get(playerTwoColorId).getColor();
            playerTwoColor.setBackground(temp);
            
            String colname = gameConsts.getColors().get(playerTwoColorId).getName();
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colname).get(playerTwoArrowId));
            playerTwoArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerTwoNextColorActionPerformed

    /**
     * The previous color is chosen for the player one.
     * 
     * Colors are coming from the constants
     * @param evt 
     */
    private void playerOnePrevColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerOnePrevColorActionPerformed
        // TODO add your handling code here:
        if(playerOneColorId > 0){
            if(playerTwoColorId != 0 && playerOneColorId-1 == playerTwoColorId){
                playerOneColorId -= 1;
            } else if(playerTwoColorId == 0 && playerOneColorId-1 == playerTwoColorId){
                playerOneColorId += 1;
            }
            playerOneColorId -= 1;
            Color temp = gameConsts.getColors().get(playerOneColorId).getColor();
            playerOneColor.setBackground(temp);
            
            String colname = gameConsts.getColors().get(playerOneColorId).getName();
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colname).get(playerOneArrowId));
            playerOneArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerOnePrevColorActionPerformed

    /**
     * The previous color is chosen for the player two.
     * 
     * Colors are coming from the constants
     * @param evt 
     */
    private void playerTwoPrevColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerTwoPrevColorActionPerformed
        // TODO add your handling code here:
        if(playerTwoColorId > 0){
            if(playerOneColorId != 0 && playerTwoColorId-1 == playerOneColorId){
                playerTwoColorId -= 1;
            } else if(playerOneColorId == 0 && playerTwoColorId-1 == playerOneColorId){
                playerTwoColorId += 1;
            }
            playerTwoColorId -= 1;
            Color temp = gameConsts.getColors().get(playerTwoColorId).getColor();
            playerTwoColor.setBackground(temp);
            
            String colname = gameConsts.getColors().get(playerTwoColorId).getName();
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colname).get(playerTwoArrowId));
            playerTwoArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerTwoPrevColorActionPerformed

    /**
     * The previous bike is selected for player one.
     * 
     * Colors and path to the images are from consts
     * 
     * @param evt 
     */
    private void playerOnePrevArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerOnePrevArrowActionPerformed
        // TODO add your handling code here:
        String colName = gameConsts.getColors().get(playerOneColorId).getName();
        if(playerOneArrowId > 0){
            playerOneArrowId -= 1;
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colName).get(playerOneArrowId));
            playerOneArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerOnePrevArrowActionPerformed

    /**
     * The next bike is selected for player one.
     * 
     * Colors and path to the images are from consts
     * 
     * @param evt 
     */
    private void playerOneNextArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerOneNextArrowActionPerformed
        // TODO add your handling code here:
        String colName = gameConsts.getColors().get(playerOneColorId).getName();
        if(playerOneArrowId+1 < gameConsts.getArrowPaths(colName).size()){
            playerOneArrowId += 1;
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colName).get(playerOneArrowId));
            playerOneArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerOneNextArrowActionPerformed

    /**
     * The previous bike is selected for player two.
     * 
     * Colors and path to the images are from consts
     * 
     * @param evt 
     */
    private void playerTwoPrevArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerTwoPrevArrowActionPerformed
        // TODO add your handling code here:
        String colName = gameConsts.getColors().get(playerTwoColorId).getName();
        if(playerTwoArrowId > 0){
            playerTwoArrowId -= 1;
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colName).get(playerTwoArrowId));
            playerTwoArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerTwoPrevArrowActionPerformed

    /**
     * The next bike is selected for player two.
     * 
     * Colors and path to the images are from consts
     * 
     * @param evt 
     */
    private void playerTwoNextArrowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerTwoNextArrowActionPerformed
        // TODO add your handling code here:
        String colName = gameConsts.getColors().get(playerTwoColorId).getName();
        if(playerTwoArrowId+1 < gameConsts.getArrowPaths(colName).size()){
            playerTwoArrowId += 1;
            ImageIcon icon = new ImageIcon(gameConsts.getArrowPaths(colName).get(playerTwoArrowId));
            playerTwoArrow.setIcon(icon);
        }
    }//GEN-LAST:event_playerTwoNextArrowActionPerformed

    /**
     * Toggles if the player is ready. If both of them are a countdown from 3 starts.
     * When finished the game loads and starts.
     * @param evt 
     */
    private void playerOneReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerOneReadyActionPerformed
        // TODO add your handling code here:
        if(!playerOneIsReady){
            playerOneReady.setBackground(Color.green);
            playerOneReady.setText("Cancel");
            playerOneIsReady = !playerOneIsReady;
            playerOneNextArrow.setEnabled(false);
            playerOnePrevArrow.setEnabled(false);
            playerOneNextColor.setEnabled(false);
            playerOnePrevColor.setEnabled(false);
            playerOneTextfield.setEditable(false);
            if(playerTwoIsReady){
                matchStarts.setText("Match starts in:");
                timer = new Timer();
                timer.scheduleAtFixedRate(new TimerTask() {
                int i = 3;
                public void run() {
                    countDown.setText(i--+"..");
                    if(!playerOneIsReady || !playerTwoIsReady){
                        i=0;
                        countDown.setText("");
                        timer.cancel();
                    }
                    if (i< 0){
                        //go to game page
                        String cs = gameConsts.getColors().get(playerTwoColorId).getName();
                        Color cc = gameConsts.getColors().get(playerTwoColorId).getColor();
                        ImageIcon ii = new ImageIcon(gameConsts.getArrowPaths(cs).get(playerTwoArrowId));
                        String cscs = gameConsts.getColors().get(playerOneColorId).getName();
                        Color c = gameConsts.getColors().get(playerOneColorId).getColor();
                        ImageIcon i = new ImageIcon(gameConsts.getArrowPaths(cscs).get(playerOneArrowId));
                        String n = playerOneTextfield.getText();
                        String nn = playerTwoTextfield.getText();
                        window.switchToGame(PlayerSelection.this,i.getImage(),ii.getImage(),c,cc,n,nn);
                        timer.cancel();
                        }
                    }
                }, 0, 1000);                
            }
        } else {
            playerOneReady.setBackground(Color.red);
            playerOneReady.setText("Ready");
            playerOneIsReady = !playerOneIsReady;
            playerOneNextArrow.setEnabled(true);
            playerOnePrevArrow.setEnabled(true);
            playerOneNextColor.setEnabled(true);
            playerOnePrevColor.setEnabled(true);
            playerOneTextfield.setEditable(true);
            matchStarts.setText("");
            countDown.setText("");
        }
    }//GEN-LAST:event_playerOneReadyActionPerformed

    /**
     * Toggles if the player is ready. If both of them are a countdown from 3 starts.
     * When finished the game loads and starts.
     * @param evt 
     */
    private void playerTwoReadyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerTwoReadyActionPerformed
        // TODO add your handling code here:
        if(!playerTwoIsReady){
            playerTwoReady.setBackground(Color.green);
            playerTwoReady.setText("Cancel");
            playerTwoIsReady = !playerTwoIsReady;
            playerTwoNextArrow.setEnabled(false);
            playerTwoPrevArrow.setEnabled(false);
            playerTwoNextColor.setEnabled(false);
            playerTwoPrevColor.setEnabled(false);
            playerTwoTextfield.setEditable(false);
            if(playerOneIsReady){
                matchStarts.setText("Match starts in:");
                timer = new Timer();
                timer.scheduleAtFixedRate(new TimerTask() {
                int i = 3;
                public void run() {
                    countDown.setText(i--+"..");
                    if(!playerOneIsReady || !playerTwoIsReady){
                        i=0;
                        countDown.setText("");
                        timer.cancel();
                    }
                    if (i< 0){
                        //go to game page
                        String cs = gameConsts.getColors().get(playerTwoColorId).getName();
                        Color cc = gameConsts.getColors().get(playerTwoColorId).getColor();
                        ImageIcon ii = new ImageIcon(gameConsts.getArrowPaths(cs).get(playerTwoArrowId));
                        String cscs = gameConsts.getColors().get(playerOneColorId).getName();
                        Color c = gameConsts.getColors().get(playerOneColorId).getColor();
                        ImageIcon i = new ImageIcon(gameConsts.getArrowPaths(cscs).get(playerOneArrowId));
                        String n = playerOneTextfield.getText();
                        String nn = playerTwoTextfield.getText();
                        window.switchToGame(PlayerSelection.this,i.getImage(),ii.getImage(),c,cc,n,nn);
                        timer.cancel();
                        }
                    }
                }, 0, 1000);
            }
        } else {
            playerTwoReady.setBackground(Color.red);
            playerTwoReady.setText("Ready");
            playerTwoIsReady = !playerTwoIsReady;
            playerTwoNextArrow.setEnabled(true);
            playerTwoPrevArrow.setEnabled(true);
            playerTwoNextColor.setEnabled(true);
            playerTwoPrevColor.setEnabled(true);
            playerTwoTextfield.setEditable(true);
            matchStarts.setText("");
            countDown.setText("");
        }
    }//GEN-LAST:event_playerTwoReadyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countDown;
    private javax.swing.JLabel matchStarts;
    private javax.swing.JLabel playerOneArrow;
    private javax.swing.JTextField playerOneColor;
    private javax.swing.JButton playerOneNextArrow;
    private javax.swing.JButton playerOneNextColor;
    private javax.swing.JButton playerOnePrevArrow;
    private javax.swing.JButton playerOnePrevColor;
    private javax.swing.JButton playerOneReady;
    private javax.swing.JTextField playerOneTextfield;
    private javax.swing.JLabel playerTwoArrow;
    private javax.swing.JTextField playerTwoColor;
    private javax.swing.JButton playerTwoNextArrow;
    private javax.swing.JButton playerTwoNextColor;
    private javax.swing.JButton playerTwoPrevArrow;
    private javax.swing.JButton playerTwoPrevColor;
    private javax.swing.JButton playerTwoReady;
    private javax.swing.JTextField playerTwoTextfield;
    // End of variables declaration//GEN-END:variables
}
